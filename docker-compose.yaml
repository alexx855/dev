version: '3.7'
services:
  traefik:
    image: traefik:latest
    restart: unless-stopped
    command:
      # - "--entrypoints.web.address=:80"
      - "--entrypoints.web-secure.address=:443"
      # http to https redirect
      # - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--log.level=DEBUG"
      # - "--log.filePath=/path/to/traefik.log"
      # - "--log.format=json"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.file.watch=true"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--serverstransport.insecureskipverify=false"
      - "--certificatesresolvers.le.acme.dnschallenge=true"
      - "--certificatesresolvers.le.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.le.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.le.acme.dnschallenge.resolvers=1.1.1.1:53"
      - "--accesslog.filepath=/logs/access.log"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.manualrouting=true"
      - "--metrics.prometheus.entryPoint=metrics"
      # - "--tracing.datadog=true"
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    container_name: traefik
    labels:
      ## Services - API
      - "traefik.enable=true"
      # dashboard
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${CF_DOMAIN}`)"
      - "traefik.http.routers.traefik-rtr.entrypoints=web-secure"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=le"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # prometheus metrics
      - "traefik.http.routers.metrics.rule=Host(`traefik.${CF_DOMAIN}`) && PathPrefix(`/metrics`)"
      - "traefik.http.routers.metrics.entrypoints=web-secure"
      - "traefik.http.routers.metrics.tls=true"
      - "traefik.http.routers.metrics.tls.certresolver=le"
      - "traefik.http.routers.metrics.service=prometheus@internal"
    ports:
      # - target: 80
      #   published: 80
      #   protocol: tcp
      #   mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host 

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # So Traefik can listen to the Docker events
      - ./FileProvider/:/FileProvider/ # So Traefik can read the dynamic configuration file
      - ./logs/:/logs/
  # Cloudflare automatic CNAME DNS creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TIMEZONE=${TZ}
      - CF_EMAIL=${CF_API_EMAIL}
      - CF_TOKEN=${CF_API_KEY}
      - TARGET_DOMAIN=ddns.${CF_DOMAIN}
      - DOMAIN1=${CF_DOMAIN}
      - DOMAIN1_ZONE_ID=${CF_DOMAIN_ZONE_ID}
      - DOMAIN1_PROXIED=true
    # labels:
    #   # Add hosts specified in rules here to force cf-companion to create the CNAMEs
    #   # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps, or load balancers from fileprovider
    #   - "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`node.${CF_DOMAIN}`)"
  # Cloudflare dynamic DNS
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=${CF_DNS_API_TOKEN}
      - ZONE=${CF_DOMAIN}
      - SUBDOMAIN=ddns
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # - '--collector.systemd --collector.processes'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - traefik.enable=true
      # - "traefik.http.routers.prometheus.middlewares=basic-auth@docker"
      # - "traefik.http.routers.prometheus.middlewares=test-basic-auth@file"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${CF_DOMAIN}`)"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.routers.prometheus.entrypoints=web-secure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=le"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: ${GF_USERS_ALLOW_SIGN_UP}
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS}
    labels:
      - traefik.enable=true
      # - "traefik.http.routers.grafana.middlewares=basic-auth@docker"
      # - "traefik.http.routers.grafana.middlewares=test-basic-auth@file"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${CF_DOMAIN}`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.entrypoints=web-secure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=le"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
volumes:
  prometheus_data:
    name: prometheus_data
  grafana_data:
    name: grafana_data